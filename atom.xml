<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>HXY</title>
  
  
  <link href="https://huxiuyuan/atom.xml" rel="self"/>
  
  <link href="https://huxiuyuan/"/>
  <updated>2022-04-21T15:41:18.824Z</updated>
  <id>https://huxiuyuan/</id>
  
  <author>
    <name>Hu XiuYuan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Mybatis Plus</title>
    <link href="https://huxiuyuan/2022/04/21/Mybatis-Plus/MybatisPlus%E4%B9%90%E8%A7%82%E9%94%81%E6%82%B2%E8%A7%82%E9%94%81/"/>
    <id>https://huxiuyuan/2022/04/21/Mybatis-Plus/MybatisPlus%E4%B9%90%E8%A7%82%E9%94%81%E6%82%B2%E8%A7%82%E9%94%81/</id>
    <published>2022-04-21T15:37:34.762Z</published>
    <updated>2022-04-21T15:41:18.824Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="MybatisPlus的乐观锁和悲观锁"><a href="#MybatisPlus的乐观锁和悲观锁" class="headerlink" title="MybatisPlus的乐观锁和悲观锁"></a>MybatisPlus的乐观锁和悲观锁</h1><h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><blockquote><p>一件商品，成本价是80元，售价是100元。老板先是通知小李，说你去把商品价格增加50元。小 李正在玩游戏，耽搁了一个小时。正好一个小时后，老板觉得商品价格增加到150元，价格太 高，可能会影响销量。又通知小王，你把商品价格降低30元。</p><p> 此时，小李和小王同时操作商品后台系统。小李操作的时候，系统先取出商品价格100元；小王 也在操作，取出的商品价格也是100元。小李将价格加了50元，并将100+50=150元存入了数据 库；小王将商品减了30元，并将100-30=70元存入了数据库。是的，如果没有锁，小李的操作就 完全被小王的覆盖了。</p><p> 现在商品价格是70元，比成本价低10元。几分钟后，这个商品很快出售了1千多件商品，老板亏1 万多。</p></blockquote><h2 id="乐观锁与悲观锁"><a href="#乐观锁与悲观锁" class="headerlink" title="乐观锁与悲观锁"></a>乐观锁与悲观锁</h2><blockquote><p>上面的故事:</p><p>如果是乐观锁，小王保存价格前，会检查下价格是否被人修改过了。如果被修改过 了，则重新取出的被修改后的价格，150元，这样他会将120元存入数据库。</p><p> 如果是悲观锁，小李取出数据后，小王只能等小李操作完之后，才能对价格进行操作，也会保证 最终的价格是120元。</p></blockquote><h2 id="MybatisPlus的实现方式"><a href="#MybatisPlus的实现方式" class="headerlink" title="MybatisPlus的实现方式"></a>MybatisPlus的实现方式</h2><blockquote><ol><li>取出记录，携带记录的当前<code>version</code>；</li><li>更新记录的时候，比较记录当前的<code>version</code>是否有改变；</li><li>如果<code>version</code>未改变，则更新记录，并更新<code>version</code>，一般值<code>+1</code>；</li><li>如果<code>version</code>改变了，则不更新记录。</li></ol></blockquote><h3 id="1-建表"><a href="#1-建表" class="headerlink" title="1.建表"></a>1.建表</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_product</span><br><span class="line">(</span><br><span class="line">id <span class="type">BIGINT</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line">NAME <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;商品名称&#x27;</span>,</span><br><span class="line">price <span class="type">INT</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="number">0</span> COMMENT <span class="string">&#x27;价格&#x27;</span>,</span><br><span class="line">VERSION <span class="type">INT</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="number">0</span> COMMENT <span class="string">&#x27;乐观锁版本号&#x27;</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (id)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t_product (id, NAME, price) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;外星人笔记本&#x27;</span>, <span class="number">100</span>);</span><br></pre></td></tr></table></figure><h3 id="2-配置实体类"><a href="#2-配置实体类" class="headerlink" title="2.配置实体类"></a>2.配置实体类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName(&quot;t_product&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableId(type = IdType.AUTO)</span></span><br><span class="line">    <span class="meta">@TableField(&quot;id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(&quot;name&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(&quot;price&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer price;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Version</span> <span class="comment">// 指定该字段为版本号</span></span><br><span class="line">    <span class="keyword">private</span> Integer version;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-配置乐观锁插件"><a href="#3-配置乐观锁插件" class="headerlink" title="3.配置乐观锁插件"></a>3.配置乐观锁插件</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> MybatisPlusInterceptor <span class="title">mybatisPlusInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    MybatisPlusInterceptor interceptor = <span class="keyword">new</span> MybatisPlusInterceptor();</span><br><span class="line">    <span class="comment">// 添加分页插件</span></span><br><span class="line">    interceptor.addInnerInterceptor(<span class="keyword">new</span> PaginationInnerInterceptor(DbType.MYSQL));</span><br><span class="line">    <span class="comment">// 添加乐观锁插件</span></span><br><span class="line">    interceptor.addInnerInterceptor(<span class="keyword">new</span> OptimisticLockerInnerInterceptor());</span><br><span class="line">    <span class="keyword">return</span> interceptor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-乐观锁测试"><a href="#4-乐观锁测试" class="headerlink" title="4.乐观锁测试"></a>4.乐观锁测试</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testProduct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 小李查询的商品价格</span></span><br><span class="line">    Product productLi = productMapper.selectById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;小李查询的商品价格 = &quot;</span> + productLi);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 小王查询的商品价格</span></span><br><span class="line">    Product productWang = productMapper.selectById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;小王查询的商品价格 = &quot;</span> + productWang);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 小李将商品加50</span></span><br><span class="line">    productLi.setPrice(productLi.getPrice() + <span class="number">50</span>);</span><br><span class="line">    productMapper.updateById(productLi);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 小王将商品价格减30</span></span><br><span class="line">    productWang.setPrice(productWang.getPrice() - <span class="number">30</span>);</span><br><span class="line">    <span class="keyword">int</span> result = productMapper.updateById(productWang);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果小王操作失败 重试</span></span><br><span class="line">    <span class="keyword">if</span> (result == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// MP在3.4.0版本之后，插件的使用方法发生了改变，而且配置乐观锁，必须先查询在更新</span></span><br><span class="line">        Product productWang2 = productMapper.selectById(<span class="number">1</span>);</span><br><span class="line">        productWang2.setPrice(productWang.getPrice() - <span class="number">30</span>);</span><br><span class="line">        <span class="keyword">int</span> update = productMapper.updateById(productWang2);</span><br><span class="line">        System.out.println(update == <span class="number">1</span> ? <span class="string">&quot;操作成功&quot;</span> : <span class="string">&quot;操作失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 老板查询商品价格</span></span><br><span class="line">    Product productBoss = productMapper.selectById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;老板查询出的价格：&quot;</span> + productBoss);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">MybatisPlus的乐观锁和悲观锁</summary>
    
    
    
    <category term="Mybatis-Plus" scheme="https://huxiuyuan/categories/Mybatis-Plus/"/>
    
    
    <category term="Mybatis-Plus" scheme="https://huxiuyuan/tags/Mybatis-Plus/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis Plus</title>
    <link href="https://huxiuyuan/2022/04/21/Mybatis-Plus/MybatisPplus%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2/"/>
    <id>https://huxiuyuan/2022/04/21/Mybatis-Plus/MybatisPplus%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2/</id>
    <published>2022-04-21T14:50:15.026Z</published>
    <updated>2022-04-21T14:57:43.833Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h2 id="MybatisPlus-分页查询"><a href="#MybatisPlus-分页查询" class="headerlink" title="MybatisPlus 分页查询"></a>MybatisPlus 分页查询</h2><h3 id="创建配置类"><a href="#创建配置类" class="headerlink" title="创建配置类"></a>创建配置类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Title</span> MybatisConfig</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> HuXiuYuan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/11/17 23:52</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.atguigu.mapper&quot;)</span> <span class="comment">// 只负责扫描mapper接口</span></span><br><span class="line"><span class="meta">@Configuration</span> <span class="comment">// 配置类，MapperScan才会起作用</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * bean注入到容器中的方法</span></span><br><span class="line"><span class="comment">     *      1.Spring配置文件中，通过bean标签配置</span></span><br><span class="line"><span class="comment">     *      2.在类名上使用Spring组件注解：</span></span><br><span class="line"><span class="comment">     *          Controller</span></span><br><span class="line"><span class="comment">     *          Service</span></span><br><span class="line"><span class="comment">     *          Repository</span></span><br><span class="line"><span class="comment">     *          Component</span></span><br><span class="line"><span class="comment">     *          Configuration</span></span><br><span class="line"><span class="comment">     *          RestController</span></span><br><span class="line"><span class="comment">     *      3.在组件类中通过<span class="doctag">@Bean</span>标注的方法的返回值会被注入到Spring容器中</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 将分页拦截器插件注入到Spring容器中</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> PaginationInterceptor</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MybatisPlusInterceptor <span class="title">mybatisPlusInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        MybatisPlusInterceptor interceptor = <span class="keyword">new</span> MybatisPlusInterceptor();</span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> PaginationInnerInterceptor(DbType.MYSQL));</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    public PaginationInterceptor paginationInterceptor() &#123;</span></span><br><span class="line"><span class="comment">//        return new PaginationInterceptor();</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试分页方法"><a href="#测试分页方法" class="headerlink" title="测试分页方法"></a>测试分页方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Page&lt;User&gt; page = <span class="keyword">new</span> Page&lt;&gt;(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line">        userMapper.selectPage(page, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取当前页记录</span></span><br><span class="line">        page.getRecords();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取页数</span></span><br><span class="line">        page.getPages();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 是否有下一页</span></span><br><span class="line">        page.hasNext();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 是否有上一页</span></span><br><span class="line">        page.hasPrevious();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="自定义分页查询"><a href="#自定义分页查询" class="headerlink" title="自定义分页查询"></a>自定义分页查询</h2><h3 id="自定义分页方法"><a href="#自定义分页方法" class="headerlink" title="自定义分页方法"></a>自定义分页方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义分页查询</span></span><br><span class="line"><span class="comment">     * 通过年龄查询用户信息并分页</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function">Page&lt;User&gt; <span class="title">selectPageVo</span><span class="params">(<span class="meta">@Param(&quot;page&quot;)</span> Page&lt;User&gt; page, <span class="meta">@Param(&quot;age&quot;)</span> Integer age)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="xml配置sql"><a href="#xml配置sql" class="headerlink" title="xml配置sql"></a>xml配置sql</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectPageVo&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.atguigu.entity.User&quot;</span>&gt;</span></span><br><span class="line">    select id, name, age, email from user where age &gt; #&#123;age&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="自定义分页方法测试"><a href="#自定义分页方法测试" class="headerlink" title="自定义分页方法测试"></a>自定义分页方法测试</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试自定义分页查询</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMinePage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Page&lt;User&gt; page = <span class="keyword">new</span> Page&lt;&gt;(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line">userMapper.selectPageVo(page, <span class="number">20</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Mybatis Plus分页查询</summary>
    
    
    
    <category term="Mybatis-Plus" scheme="https://huxiuyuan/categories/Mybatis-Plus/"/>
    
    
    <category term="Mybatis-Plus" scheme="https://huxiuyuan/tags/Mybatis-Plus/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis Plus</title>
    <link href="https://huxiuyuan/2022/04/21/Mybatis-Plus/mybatis-plus%E6%9D%A1%E4%BB%B6%E6%9E%84%E9%80%A0%E5%99%A8/"/>
    <id>https://huxiuyuan/2022/04/21/Mybatis-Plus/mybatis-plus%E6%9D%A1%E4%BB%B6%E6%9E%84%E9%80%A0%E5%99%A8/</id>
    <published>2022-04-21T14:50:13.518Z</published>
    <updated>2022-04-21T14:50:36.665Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="MybatisPlus"><a href="#MybatisPlus" class="headerlink" title="MybatisPlus"></a>MybatisPlus</h1><blockquote><p>MyBatisPlus是一个MyBatis的增强工具，在MyBatis的基础上只做增强不做改变，为简化开发，提高效率而生。MyBatisPlus提供了通用的mapper和service，可以在不编写任何SQL语句的情况下，快速地实现对单表的CRUD、批量、逻辑删除、分页等操作</p></blockquote><h2 id="MybaisPlus启动器"><a href="#MybaisPlus启动器" class="headerlink" title="MybaisPlus启动器"></a>MybaisPlus启动器</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 数据源配置</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/mybatisplus?characterEncoding=utf-8&amp;serverTimezone=GMT%2B8</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># mybatis-plus sql 打印输出</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line">    <span class="comment"># 指定mapper.xml的位置，默认是在resource的mapper文件夹下面</span></span><br><span class="line">    <span class="comment"># 如果要放在别的地方就需要指定路径</span></span><br><span class="line">    <span class="comment"># mapper-locations: classpath:mappers/*.xml </span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">     <span class="attr">db-config:</span></span><br><span class="line">       <span class="comment"># 设置实体类所对应的表的统一前缀</span></span><br><span class="line">       <span class="attr">table-prefix:</span></span><br><span class="line">       <span class="comment"># 设置统一的主键生成策略</span></span><br><span class="line">       <span class="attr">id-type:</span> <span class="string">auto</span></span><br></pre></td></tr></table></figure><h2 id="MybatisPlus常用注解"><a href="#MybatisPlus常用注解" class="headerlink" title="MybatisPlus常用注解"></a>MybatisPlus常用注解</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@MapperScan(&quot;com.atguigu.mapper&quot;)</span> 启动类添加，扫描mapper所在的包</span><br><span class="line"></span><br><span class="line"><span class="meta">@TableName(value = &quot;user&quot;)</span>  设置实体类所对应的表明</span><br><span class="line"><span class="meta">@TableFiele(exists = false)</span> 表示表中没有该字段</span><br><span class="line"><span class="meta">@TableFiele(value = &quot;name&quot;)</span> 指定该属性在表中映射的列名</span><br><span class="line"><span class="meta">@TableLogic</span>                 指定该字段为逻辑删除字段</span><br><span class="line"><span class="meta">@TableId(value = &quot;id&quot;, type = IdType.AUTO)</span>   value 的值为数据库主键字段</span><br><span class="line">     type 指定主键生成策略</span><br></pre></td></tr></table></figure><h1 id="条件构造器Wrpper"><a href="#条件构造器Wrpper" class="headerlink" title="条件构造器Wrpper"></a>条件构造器Wrpper</h1><ul><li>Wrapper：条件构造抽象类，最顶端父类<ul><li>AbstractWrapper：用于查询条件封装，生成 sql 的 where 条件<ul><li>QueryWrapper：查询条件封装</li><li>UpdateWrapper：Update条件封装</li><li>AbstractLambdaWrpper：可以使用 Lambda 语法<ul><li>LambdaQueryWrapper：用于 Lambda 语法使用的查询 Wrapper</li><li>LambdaUpdateWrapper：Lambda 语法封装的更新 Wrpper</li></ul></li></ul></li></ul></li></ul><h2 id="QueryWrapper"><a href="#QueryWrapper" class="headerlink" title="QueryWrapper"></a>QueryWrapper</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">QueryWrapper&lt;T&gt; queryWrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br></pre></td></tr></table></figure><h3 id="查询条件"><a href="#查询条件" class="headerlink" title="查询条件"></a>查询条件</h3><h4 id="select"><a href="#select" class="headerlink" title="select"></a>select</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 指定查询的字段</span></span><br><span class="line">queryWrapper.select(String... columns);</span><br></pre></td></tr></table></figure><h4 id="eq-等于"><a href="#eq-等于" class="headerlink" title="eq 等于"></a>eq 等于</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * where 查询条件</span></span><br><span class="line"><span class="comment"> * condition 可选 </span></span><br><span class="line"><span class="comment"> * column    字段</span></span><br><span class="line"><span class="comment"> * val       值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">queryWrapper.eq(<span class="keyword">boolean</span> condition, R column, Object val);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果user的name不为空，就查询 name = zhangsan 的数据</span></span><br><span class="line">queryWrapper.eq(StringUtils.isNotEmpty(user.getName()), <span class="string">&quot;name&quot;</span>, <span class="string">&quot;zhangsan&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="ne-不等于"><a href="#ne-不等于" class="headerlink" title="ne 不等于"></a>ne 不等于</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">queryWrapper.ne(<span class="keyword">boolean</span> condition, R column, Object val);</span><br></pre></td></tr></table></figure><h4 id="or-或"><a href="#or-或" class="headerlink" title="or() 或"></a>or() 或</h4><blockquote><p>使用 or 拼接条件</p></blockquote><h4 id="and-条件优先级"><a href="#and-条件优先级" class="headerlink" title="and 条件优先级"></a>and 条件优先级</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Consumer 消费类型接口 有参数 无返回值 参数为当前条件构造器</span></span><br><span class="line">and(Consumer&lt;Param&gt; consumer)</span><br><span class="line"><span class="comment">// 查询 （名字为刘伟） 并且 （年龄大于20或email为空） 的数据</span></span><br><span class="line">queryWrapper.eq(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;刘伟&quot;</span>).and(e -&gt; e.gt(<span class="string">&quot;age&quot;</span>, <span class="number">20</span>).or().isNull(<span class="string">&quot;email&quot;</span>));</span><br></pre></td></tr></table></figure><h4 id="in"><a href="#in" class="headerlink" title="in"></a>in</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">queryWrapper.in(<span class="keyword">boolean</span> condition, R column, Collection&lt;?&gt; coll);</span><br><span class="line">queryWrapper.in(<span class="keyword">boolean</span> condition, R column, Object... values);</span><br></pre></td></tr></table></figure><h4 id="notIn"><a href="#notIn" class="headerlink" title="notIn"></a>notIn</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">queryWrapper.notIn(<span class="keyword">boolean</span> condition, R column, Collection&lt;?&gt; coll);</span><br><span class="line">queryWrapper.notIn(<span class="keyword">boolean</span> condition, R column, Object... values);</span><br></pre></td></tr></table></figure><h4 id="between-在两者之间"><a href="#between-在两者之间" class="headerlink" title="between 在两者之间"></a>between 在两者之间</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">queryWrapper.between(<span class="keyword">boolean</span> condition, R column, Object val1, Object val2);</span><br></pre></td></tr></table></figure><h4 id="notBetween"><a href="#notBetween" class="headerlink" title="notBetween"></a>notBetween</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">queryWrapper.notBetween(<span class="keyword">boolean</span> condition, R column, Object val1, Object val2);</span><br></pre></td></tr></table></figure><h4 id="like-包含"><a href="#like-包含" class="headerlink" title="like 包含"></a>like 包含</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">queryWrapper.like(<span class="keyword">boolean</span> condition, R column, Object val);</span><br></pre></td></tr></table></figure><h4 id="likeRight-以什么开头-在右边"><a href="#likeRight-以什么开头-在右边" class="headerlink" title="likeRight 以什么开头 %在右边"></a>likeRight 以什么开头 %在右边</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">queryWrapper.likeRight(StringUtils.isNotEmpty(user.getEmail()), <span class="string">&quot;email&quot;</span>, <span class="string">&quot;8&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="likeRight-以什么结尾-在左边"><a href="#likeRight-以什么结尾-在左边" class="headerlink" title="likeRight 以什么结尾 %在左边"></a>likeRight 以什么结尾 %在左边</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">queryWrapper.likeLeft(StringUtils.isNotEmpty(user.getEmail()), <span class="string">&quot;email&quot;</span>, <span class="string">&quot;m&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="notLike"><a href="#notLike" class="headerlink" title="notLike"></a>notLike</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">queryWrapper.notLike(<span class="keyword">boolean</span> condition, R column, Object val);</span><br></pre></td></tr></table></figure><h4 id="isNull-判断字段的值是否为null"><a href="#isNull-判断字段的值是否为null" class="headerlink" title="isNull 判断字段的值是否为null"></a>isNull 判断字段的值是否为null</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">queryWrapper.isNull(StringUtils.isNotEmpty(user.getEmail()), <span class="string">&quot;email&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="isNotNull-判断字段的值不为null"><a href="#isNotNull-判断字段的值不为null" class="headerlink" title="isNotNull 判断字段的值不为null"></a>isNotNull 判断字段的值不为null</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">queryWrapper.isNotNull(StringUtils.isNotEmpty(user.getEmail()), <span class="string">&quot;email&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="gt-大于"><a href="#gt-大于" class="headerlink" title="gt 大于"></a>gt 大于</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">queryWrapper.gt(<span class="keyword">boolean</span> condition, R column, Object val);</span><br></pre></td></tr></table></figure><h4 id="lt-小于"><a href="#lt-小于" class="headerlink" title="lt 小于"></a>lt 小于</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">queryWrapper.lt(<span class="keyword">boolean</span> condition, R column, Object val);</span><br></pre></td></tr></table></figure><h4 id="ge-大于等于"><a href="#ge-大于等于" class="headerlink" title="ge 大于等于"></a>ge 大于等于</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">queryWrapper.ge(!user.getDeleted(), <span class="string">&quot;age&quot;</span>, <span class="number">25</span>);</span><br></pre></td></tr></table></figure><h4 id="lt-小于等于"><a href="#lt-小于等于" class="headerlink" title="lt 小于等于"></a>lt 小于等于</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">queryWrapper.le(!user.getDeleted(), &quot;age&quot;, 25);</span><br></pre></td></tr></table></figure><h3 id="排序条件"><a href="#排序条件" class="headerlink" title="排序条件"></a>排序条件</h3><h4 id="ASC-升序-DESC-降序"><a href="#ASC-升序-DESC-降序" class="headerlink" title="ASC 升序   DESC 降序"></a>ASC 升序   DESC 降序</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">queryWrapper.orderByAsc(user.getAge() != <span class="keyword">null</span>, <span class="string">&quot;age&quot;</span>)</span><br><span class="line">                .orderByDesc(user.getAge() != <span class="keyword">null</span>, <span class="string">&quot;id&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="UpdateWrapper"><a href="#UpdateWrapper" class="headerlink" title="UpdateWrapper"></a>UpdateWrapper</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(<span class="meta">@Param(&quot;et&quot;)</span> T entity, <span class="meta">@Param(&quot;ew&quot;)</span> Wrapper&lt;T&gt; updateWrapper)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="更新条件"><a href="#更新条件" class="headerlink" title="更新条件"></a>更新条件</h3><h4 id="set-设置更新的字段和值"><a href="#set-设置更新的字段和值" class="headerlink" title="set 设置更新的字段和值"></a>set 设置更新的字段和值</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">updateWrapper.set(<span class="keyword">boolean</span> condition, R column, Object val);</span><br></pre></td></tr></table></figure><h3 id="构建子查询"><a href="#构建子查询" class="headerlink" title="构建子查询"></a>构建子查询</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line"><span class="comment">// 查询年龄小于等于100的数据</span></span><br><span class="line">queryWrapper.inSql(<span class="string">&quot;age&quot;</span>, <span class="string">&quot;select age from user where age &lt;= 100&quot;</span>);</span><br><span class="line">List&lt;User&gt; userList = userMapper.selectList(queryWrapper);</span><br></pre></td></tr></table></figure><h3 id="LambdaQueryWrapper和LambdaUpdateWrapper"><a href="#LambdaQueryWrapper和LambdaUpdateWrapper" class="headerlink" title="LambdaQueryWrapper和LambdaUpdateWrapper"></a>LambdaQueryWrapper和LambdaUpdateWrapper</h3><blockquote><ol><li><p>使用Lambda表达式的好处是写实体属性，而不是数据库字段，这样就不用担心数据库字段改了需要修改java中的代码</p></li><li><p>可以写成lambda链式调用形式，直接通过方法的引用设置字段，可以防止字段名写错</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通常使用 </span></span><br><span class="line">Wrappers.lambdaQuery(Class&lt;T&gt; entityClass)</span><br><span class="line">Wrappers.lambdaUpdate(Class&lt;T&gt; entityClass)</span><br></pre></td></tr></table></figure></li></ol></blockquote>]]></content>
    
    
    <summary type="html">Mybatis Plus条件构造器</summary>
    
    
    
    <category term="Mybatis-Plus" scheme="https://huxiuyuan/categories/Mybatis-Plus/"/>
    
    <category term="MySQL" scheme="https://huxiuyuan/categories/Mybatis-Plus/MySQL/"/>
    
    
    <category term="Mybatis-Plus" scheme="https://huxiuyuan/tags/Mybatis-Plus/"/>
    
  </entry>
  
  <entry>
    <title>虚拟机安装 Win 7</title>
    <link href="https://huxiuyuan/2022/04/10/%E5%85%B6%E4%BB%96/%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85win%207/"/>
    <id>https://huxiuyuan/2022/04/10/%E5%85%B6%E4%BB%96/%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85win%207/</id>
    <published>2022-04-09T17:39:59.558Z</published>
    <updated>2022-04-09T17:42:53.133Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><ol><li><p>创建好之后设置win 7镜像文件</p><p><img src="https://cdn.jsdelivr.net/gh/huxiuyuan/java-learn/202204100117799.png" alt="image-20220410011724690"></p></li><li><p>开启虚拟机</p></li><li><p>选择自定义安装</p><p><img src="https://cdn.jsdelivr.net/gh/huxiuyuan/java-learn/202204100120607.png" alt="image-20220410012050524"></p></li><li><p>分配磁盘空间</p><p><img src="https://cdn.jsdelivr.net/gh/huxiuyuan/java-learn/202204100121970.png" alt="image-20220410012155892"></p></li><li><p>等待安装</p><p><img src="https://cdn.jsdelivr.net/gh/huxiuyuan/java-learn/202204100124994.png" alt="image-20220410012423928"></p></li><li><p>输入用户名，跳过密码</p><p><img src="https://cdn.jsdelivr.net/gh/huxiuyuan/java-learn/202204100128923.png" alt="image-20220410012810857"></p></li><li><p>取消勾选，下一步</p><p><img src="https://cdn.jsdelivr.net/gh/huxiuyuan/java-learn/202204100129562.png" alt="image-20220410012906500"></p></li><li><p>选择以后询问</p><p><img src="https://cdn.jsdelivr.net/gh/huxiuyuan/java-learn/202204100130950.png" alt="image-20220410013001881"></p></li><li><p>安装虚拟机工具</p><p><img src="https://cdn.jsdelivr.net/gh/huxiuyuan/java-learn/202204100131838.png" alt="image-20220410013141771"></p></li><li><p>查找路径，双击安装</p><p><img src="https://cdn.jsdelivr.net/gh/huxiuyuan/java-learn/202204100133713.png" alt="image-20220410013314620"></p></li><li><p>下一步，典型安装</p><p><img src="https://cdn.jsdelivr.net/gh/huxiuyuan/java-learn/202204100134765.png" alt="image-20220410013446655"></p></li><li><p>将office 10 复制进来，点击安装</p><p><img src="https://cdn.jsdelivr.net/gh/huxiuyuan/java-learn/202204100136870.png" alt="image-20220410013609721"></p></li><li><p>等待安装</p></li></ol>]]></content>
    
    
    <summary type="html">虚拟机安装 Windows 7</summary>
    
    
    
    <category term="虚拟机" scheme="https://huxiuyuan/categories/%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
    
    <category term="windows 7" scheme="https://huxiuyuan/tags/windows-7/"/>
    
  </entry>
  
  <entry>
    <title>JavaSctipt基础</title>
    <link href="https://huxiuyuan/2022/04/07/%E5%89%8D%E7%AB%AF/JavaScript/JS%E5%9F%BA%E7%A1%80/"/>
    <id>https://huxiuyuan/2022/04/07/%E5%89%8D%E7%AB%AF/JavaScript/JS%E5%9F%BA%E7%A1%80/</id>
    <published>2022-04-07T14:01:07.797Z</published>
    <updated>2022-04-07T14:04:48.799Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="JavaScript基础"><a href="#JavaScript基础" class="headerlink" title="JavaScript基础"></a>JavaScript基础</h1><h2 id="判断语句"><a href="#判断语句" class="headerlink" title="判断语句"></a>判断语句</h2><h3 id="if-…-else-…判断"><a href="#if-…-else-…判断" class="headerlink" title="if … else …判断"></a>if … else …判断</h3><blockquote><p>任何不是 false、undefined、null、0、NaN 或者 ”“ 空字符串的值在作为条件测试语句的时候都返回 true<br>因此可以直接使用变量名测试它是否为真，或是否存在（不是未定义的）</p></blockquote><h3 id="Switch"><a href="#Switch" class="headerlink" title="Switch"></a>Switch</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span>(expression) &#123;</span><br><span class="line">    <span class="keyword">case</span> choise1:</span><br><span class="line">        run <span class="built_in">this</span> code</span><br><span class="line">        breank;</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">case</span> choise2:</span><br><span class="line">        run <span class="built_in">this</span> code</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        run <span class="built_in">this</span> code</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如果没有选项匹配，指定defaule语句，default语句不是必须的</p></blockquote><h3 id="三目运算符"><a href="#三目运算符" class="headerlink" title="三目运算符"></a>三目运算符</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(condition) ？ <span class="literal">true</span> : <span class="literal">false</span>; </span><br></pre></td></tr></table></figure><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><ul><li>值类型(基本类型)：String、Number、Boolean、Null、undefined、Symbol</li><li>引用数据类型(对象类型)：Object、Array、Function、正则(RegExp)、Date</li></ul><p>注：Symbol 是 ES6 引入了一种新的原始数据类型，表示独一无二的值</p><h4 id="typeof-获取变量的数据类型"><a href="#typeof-获取变量的数据类型" class="headerlink" title="typeof 获取变量的数据类型"></a>typeof 获取变量的数据类型</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取变量的数据类型</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="string">&quot;John&quot;</span>         <span class="comment">// String</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="number">2.35</span>           <span class="comment">// Number</span></span><br><span class="line"><span class="keyword">typeof</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]        <span class="comment">// object</span></span><br><span class="line"><span class="keyword">typeof</span> &#123;<span class="attr">name</span>: <span class="string">&#x27;rose&#x27;</span>&#125; <span class="comment">// object</span></span><br></pre></td></tr></table></figure><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> cars = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">&#x27;BWM&#x27;</span>);</span><br><span class="line">csrs[<span class="number">1</span>] = <span class="string">&#x27;Audi&#x27;</span>;</span><br></pre></td></tr></table></figure><h4 id="Undefined-和-Null"><a href="#Undefined-和-Null" class="headerlink" title="Undefined 和 Null"></a>Undefined 和 Null</h4><blockquote><p>undefined表示变量不含有值<br>可以将变量的值设为 null 来清空变量</p></blockquote><h4 id="声明变量类型"><a href="#声明变量类型" class="headerlink" title="声明变量类型"></a>声明变量类型</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 可以使用关键字 new 来声明其类型</span></span><br><span class="line"><span class="keyword">var</span> name = nwe <span class="built_in">String</span>;</span><br><span class="line"><span class="keyword">var</span> x = <span class="keyword">new</span> <span class="built_in">Number</span>;</span><br><span class="line"><span class="keyword">var</span> array = <span class="keyword">new</span> <span class="built_in">Array</span>;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> <span class="built_in">Object</span>;</span><br></pre></td></tr></table></figure><h2 id="JavaScript-对象"><a href="#JavaScript-对象" class="headerlink" title="JavaScript 对象"></a>JavaScript 对象</h2><blockquote><ol><li>在 javascript 中，几乎所有的事务都是对象</li><li>对象也是一个变量，但是对象可以包含多个值(多个变量)，每个值以 name:value 对呈现。</li></ol></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> car = &#123;<span class="attr">name</span>:<span class="string">&#x27;audi&#x27;</span>, <span class="attr">color</span>:<span class="string">&#x27;black&#x27;</span>&#125;;</span><br></pre></td></tr></table></figure><h4 id="访问对象属性"><a href="#访问对象属性" class="headerlink" title="访问对象属性"></a>访问对象属性</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象属性有两种获取方式</span></span><br><span class="line">name = person.name;</span><br><span class="line">name = person[<span class="string">&quot;name&quot;</span>];</span><br></pre></td></tr></table></figure><h4 id="对象方法"><a href="#对象方法" class="headerlink" title="对象方法"></a>对象方法</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 对象方法的创建</span></span><br><span class="line"><span class="attr">methodName</span> : <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// TODO</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问方式</span></span><br><span class="line">objectNmae.methodName();</span><br></pre></td></tr></table></figure><h2 id="JavaScript-函数"><a href="#JavaScript-函数" class="headerlink" title="JavaScript 函数"></a>JavaScript 函数</h2><blockquote><p>函数是由事件驱动的或者当它被调用时执行的可重复使用的代码块</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;button onclick=<span class="string">&quot;myFunction()&quot;</span>&gt;点我&lt;/button&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params"></span>)</span></span></span></span><br><span class="line"><span class="function"><span class="javascript"><span class="xml"></span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    alert(<span class="string">&quot;Hello World!&quot;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h4 id="javascript-函数语法"><a href="#javascript-函数语法" class="headerlink" title="javascript 函数语法"></a>javascript 函数语法</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">functionname</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">// TODO</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>javascript 对大小写敏感，关键词function必须小写，调用时函数名必须相同</p></blockquote><h2 id="局部变量、全局变量"><a href="#局部变量、全局变量" class="headerlink" title="局部变量、全局变量"></a>局部变量、全局变量</h2><blockquote><ol><li>在 javascript 函数内部声明的变量（使用var）是局部变量，所以只能在函数内部访问</li><li>在函数外生命的变量是全局变量，网页上的所有脚本和函数都能访问</li></ol></blockquote><h2 id="常见的HTML事件"><a href="#常见的HTML事件" class="headerlink" title="常见的HTML事件"></a>常见的HTML事件</h2><table><thead><tr><th>事件</th><th>描述</th></tr></thead><tbody><tr><td>onchange</td><td>HTML元素改变</td></tr><tr><td>onclick</td><td>用户点击HTML元素</td></tr><tr><td>onmouseover</td><td>鼠标指针移动到指定的元素上时发生</td></tr><tr><td>onmouseout</td><td>用户从一个HTML元素上移开鼠标时发生</td></tr><tr><td>onkeydown</td><td>用户按下键盘</td></tr><tr><td>onload</td><td>浏览器已完成页面的加载</td></tr></tbody></table><h2 id="JavaScript-字符串"><a href="#JavaScript-字符串" class="headerlink" title="JavaScript 字符串"></a>JavaScript 字符串</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> carname = <span class="string">&quot;dreamCar&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以使用索引位置访问字符串中的每个字符</span></span><br><span class="line"><span class="keyword">var</span> character = carname[<span class="number">3</span>] <span class="comment">// &#x27;a&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用转义字符来添加符号</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="string">&#x27;It\&#x27;s alright&#x27;</span>; <span class="comment">// It&#x27;s alright</span></span><br></pre></td></tr></table></figure><p>注：不要创建 String 对象，它会拖慢执行速度</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="string">&#x27;John&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> y = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">&#x27;John&#x27;</span>);</span><br><span class="line">(x === y) <span class="comment">// false ，x是字符串，y是对象，=== 为绝对相等，值和类型都要相等</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/huxiuyuan/java-learn/202204062232031.png" alt="image-20220406223215948"></p><h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><blockquote><p>当 promise 被构造时，起始函数会被异步执行</p></blockquote><ul><li>Promise 类有 .then()、.catch()、.finally 三个方法，这三个方法的参数都是一个函数<ul><li>.then() 可以将参数中的函数添加到当前 Promise 的正常执行序列</li><li>.catch() 则是设定 Promise 的异常处理序列</li><li>.finally() 是在 Promise 执行的最后一定会执行的序列</li></ul></li><li>.then() 传入的函数会按顺序依次执行，有任何异常都会直接跳到 catch 序列</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">  resolve(<span class="number">2</span>);</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">  <span class="keyword">throw</span> <span class="string">&quot;an error&quot;</span>;</span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(err);</span><br><span class="line">&#125;).finally(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;end&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行结果</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line">an error</span><br><span class="line">end</span><br></pre></td></tr></table></figure><blockquote><p>resolve()  中可以放置一个参数用于向下一个 then 传递一个值<br>如果 then 中返回的是一个 Promise 对象，那么下一个 then 将相当于对这个返回的 Promise 进行操作</p><p>reject()  参数中一般会传递一个异常给之后的 catch 函数用于处理异常</p></blockquote><p>注：resolve 和 reject 的作用域只有起始函数，不包括 then 以及其他序列。</p><p>​        resolve 和 reject 并不能够使起始函数停止运行，别忘了 return。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 计时器</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Third&quot;</span>);</span><br><span class="line">    &#125;, <span class="number">3000</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">print</span>(<span class="params">delay, message</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(message);</span><br><span class="line">            resolve();</span><br><span class="line">        &#125;, delay);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">print(<span class="number">1000</span>, <span class="string">&quot;First&quot;</span>).then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> print(<span class="number">4000</span>, <span class="string">&quot;Second&quot;</span>);</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    print(<span class="number">3000</span>, <span class="string">&quot;Third&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 优化</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">asyncFunc</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">await</span> print(<span class="number">1000</span>, <span class="string">&quot;First&quot;</span>);</span><br><span class="line">    <span class="keyword">await</span> print(<span class="number">4000</span>, <span class="string">&quot;Second&quot;</span>);</span><br><span class="line">    <span class="keyword">await</span> print(<span class="number">3000</span>, <span class="string">&quot;Third&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">asyncFunc();</span><br></pre></td></tr></table></figure><h4 id="try-catch"><a href="#try-catch" class="headerlink" title="try - catch"></a>try - catch</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">asyncFunc</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">await</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="string">&quot;Some error&quot;</span>; <span class="comment">// 或者 reject(&quot;Some error&quot;)</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err);</span><br><span class="line">        <span class="comment">// 会输出 Some error</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">asyncFunc();</span><br></pre></td></tr></table></figure><h4 id="如果-Promise-有一个正常的返回值，await-语句也会返回它"><a href="#如果-Promise-有一个正常的返回值，await-语句也会返回它" class="headerlink" title="如果 Promise 有一个正常的返回值，await 语句也会返回它"></a>如果 Promise 有一个正常的返回值，await 语句也会返回它</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">asyncFunc</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> value = <span class="keyword">await</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(</span><br><span class="line">        <span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">            resolve(<span class="string">&quot;Return value&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    );</span><br><span class="line">    <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;</span><br><span class="line">asyncFunc();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出：Return value</span></span><br></pre></td></tr></table></figure><h2 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h2><blockquote><p>函数可以通过声明定义，也可以是一个表达式。</p></blockquote><h4 id="函数表达式"><a href="#函数表达式" class="headerlink" title="函数表达式"></a>函数表达式</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;<span class="keyword">return</span> a * b&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在函数表达式存储在变量后，变量也可以作为一个函数使用</span></span><br><span class="line"><span class="keyword">var</span> z = x(<span class="number">4</span>, <span class="number">3</span>); <span class="comment">// 12</span></span><br></pre></td></tr></table></figure><ul><li>上面的函数实际上是一个匿名函数（没有函数名称）</li><li>函数存储在变量中，不需要函数名称，通常通过变量名来调用</li></ul><h4 id="Function-构造函数"><a href="#Function-构造函数" class="headerlink" title="Function() 构造函数"></a>Function() 构造函数</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myFunction = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>,<span class="string">&quot;return a * b&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> x = myFunction(<span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实际上，不必使用构造函数，可以直接写成</span></span><br><span class="line"><span class="keyword">var</span> myFunction = <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;<span class="keyword">return</span> a * b&#125;;</span><br><span class="line"><span class="keyword">var</span> x = myFunction(<span class="number">4</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure><h4 id="自调用函数"><a href="#自调用函数" class="headerlink" title="自调用函数"></a>自调用函数</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> x = <span class="string">&quot;Hello&quot;</span>;     <span class="comment">// 我将调用我自己</span></span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以上函数实际上是一个匿名自我调用函数（没有函数名）。</span></span><br></pre></td></tr></table></figure><h4 id="函数可作为一个值使用"><a href="#函数可作为一个值使用" class="headerlink" title="函数可作为一个值使用"></a>函数可作为一个值使用</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFuntion</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a *b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x = myFuntion(<span class="number">4</span>,<span class="number">3</span>) * <span class="number">2</span>;</span><br></pre></td></tr></table></figure><h4 id="函数是对象"><a href="#函数是对象" class="headerlink" title="函数是对象"></a>函数是对象</h4><blockquote><p>在 JavaScript 中使用  typeof 判断函数类型将返回 function</p><p>但是 JavaScript 函数描述为一个对象更加准确</p><p>JavaScript 函数具有属性和方法</p><p>arguments.length 属性返回函数调用过程中接收到的参数个数</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">arguments</span>.length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// toString() 方法将函数作为一个字符串返回</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a * b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> txt = myFunction.toString();</span><br></pre></td></tr></table></figure><h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><blockquote><p>ES6 新增箭头函数，箭头函数表达式的语法比普通函数表达式更简洁。</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(参数<span class="number">1</span>, 参数<span class="number">2</span>, ..., 参数N) =&gt; &#123; 函数声明 &#125;</span><br><span class="line">(参数<span class="number">1</span>, 参数<span class="number">2</span>, …, 参数N) =&gt; 表达式(单一)</span><br><span class="line"><span class="comment">// 相当于：(参数1, 参数2, …, 参数N) =&gt;&#123; return 表达式; &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 当只有一个参数时括号可以省略</span></span><br><span class="line">单一参数 =&gt; &#123; 函数声明 &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 没有参数时括号不可省略</span></span><br><span class="line">() =&gt; &#123; 函数声明 &#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ES5</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    retrun x * y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6</span></span><br><span class="line"><span class="keyword">const</span> x = <span class="function">(<span class="params">x, y</span>) =&gt;</span> x * y;</span><br></pre></td></tr></table></figure><blockquote><p>当我们使用箭头函数时，箭头函数会默认帮我们绑定外层 this 的值，所以在箭头函数中 this 的值和外层的 this 是一样的。</p><p>箭头函数是 不能提升的，所以需要在使用之前定义。</p><p>使用 const 比使用 var 更安全，因为函数表达式始终是一个常量。</p></blockquote><h2 id="JavaScript函数参数"><a href="#JavaScript函数参数" class="headerlink" title="JavaScript函数参数"></a>JavaScript函数参数</h2><h4 id="函数显示参数（Parameters）和隐式参数（Arguments）"><a href="#函数显示参数（Parameters）和隐式参数（Arguments）" class="headerlink" title="函数显示参数（Parameters）和隐式参数（Arguments）"></a>函数显示参数（Parameters）和隐式参数（Arguments）</h4><ul><li>函数显示参数在函数定义时列出。</li><li>函数隐式参数在函数调用时传递给函数真正的值。</li></ul><h4 id="参数规则"><a href="#参数规则" class="headerlink" title="参数规则"></a>参数规则</h4><blockquote><p>JavaScript 函数定义显式参数时没有指定数据类型。</p><p>JavaScript 函数对隐式参数没有进行类型检测。</p><p>JavaScript 函数对隐式参数的个数没有进行检测</p></blockquote><h4 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h4><ul><li>ES5 中如果函数在调用时未提供隐式参数，参数会默认设置为：undefined</li><li>最好设置一个默认值</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    y = y || <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果 y 已经定义，y 为 true，y || 0 返回 y</span></span><br><span class="line"><span class="comment">// 如果 y 为 undefined ，y 为false，y || 0 返回 0</span></span><br></pre></td></tr></table></figure><h4 id="ES6-函数可以自带参数"><a href="#ES6-函数可以自带参数" class="headerlink" title="ES6 函数可以自带参数"></a>ES6 函数可以自带参数</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params">x, y = <span class="number">10</span></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 如果 没有传递 y，或者 y 未定义，y的值为10</span></span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">myfunction(<span class="number">0</span>, <span class="number">2</span>)  <span class="comment">// 0</span></span><br><span class="line">myfunction(<span class="number">5</span>)     <span class="comment">// y 的默认值为10， x + y = 15</span></span><br></pre></td></tr></table></figure><h2 id="arguments-对象"><a href="#arguments-对象" class="headerlink" title="arguments 对象"></a>arguments 对象</h2><blockquote><p>JavaScript 函数有个内置的对象 arguments 对象。</p><p>arguments 对象包含了函数调用的参数数组。</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取参数中的最大值</span></span><br><span class="line">x = findMax(<span class="number">1</span>, <span class="number">23</span>, <span class="number">16</span>, <span class="number">56</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findMax</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> max = <span class="built_in">arguments</span>[<span class="number">0</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">arguments</span>.length &lt; <span class="number">2</span>) <span class="keyword">return</span> max;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">arguments</span>[i] &gt; max) &#123;</span><br><span class="line">            max = <span class="built_in">arguments</span>[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    retrun max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="通过值传递参数"><a href="#通过值传递参数" class="headerlink" title="通过值传递参数"></a>通过值传递参数</h2><blockquote><p>在函数中调用的参数时函数的隐式参数。</p><p>JavaScript 隐式参数通过值来传递，函数仅仅是获取值。</p><p>如果函数修改参数的值，不会修改显示参数的初始值（在函数外定义）。</p><p>隐式参数的改变在函数外是不可见的。</p></blockquote><h2 id="通过对象传递值"><a href="#通过对象传递值" class="headerlink" title="通过对象传递值"></a>通过对象传递值</h2><blockquote><p>在 JavaScript 中，可以引用对象的值。</p><p>因此我们在函数内部修改对象的属性就会修改其初始的值。</p><p>修改对象属性可作用于函数外部（全局变量）。</p><p>修改对象属性在函数外是可见的。</p></blockquote>]]></content>
    
    
    <summary type="html">JavaScript基础语法</summary>
    
    
    
    <category term="前端" scheme="https://huxiuyuan/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JavaScript" scheme="https://huxiuyuan/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>ES6特性</title>
    <link href="https://huxiuyuan/2022/03/24/%E5%89%8D%E7%AB%AF/JavaScript/es6/"/>
    <id>https://huxiuyuan/2022/03/24/%E5%89%8D%E7%AB%AF/JavaScript/es6/</id>
    <published>2022-03-24T10:10:28.914Z</published>
    <updated>2022-03-27T11:20:52.408Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h1><blockquote><p>ES6， 全称 ECMAScript 6.0 ，是 JavaScript 的下一个版本标准，2015.06 发版。</p></blockquote><h2 id="let-和-const"><a href="#let-和-const" class="headerlink" title="let 和 const"></a>let 和 const</h2><h3 id="let"><a href="#let" class="headerlink" title="let"></a>let</h3><ul><li>let 声明的变量只在 let 命令所在的代码块内有效。</li><li>const 声明一个只读的常量，一旦声明，常量的值就不能改变。</li></ul><h4 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h4><ul><li><p>let 是在代码块中有效， var 是全局有效</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">var</span> b = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">a  <span class="comment">// ReferenceError: a is not defined</span></span><br><span class="line">b  <span class="comment">// 1</span></span><br></pre></td></tr></table></figure></li><li><p>不能重复声明</p><ul><li>let 只能声明一次</li><li>var可以声明多次</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> a = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">4</span>;</span><br><span class="line">a <span class="comment">// Identifier &#x27;a&#x27; has already been declared</span></span><br><span class="line">b <span class="comment">// 4</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="for循环计数器适合用-let"><a href="#for循环计数器适合用-let" class="headerlink" title="for循环计数器适合用 let"></a>for循环计数器适合用 let</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;)</span><br><span class="line">&#125; <span class="comment">// 结果：输出十个 10</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++) &#123;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(j);</span><br><span class="line">&#125;)</span><br><span class="line">&#125; <span class="comment">// 结果：输出0123456789</span></span><br></pre></td></tr></table></figure><ul><li>变量 i 是用 var 声明的，在全局范围内只有一个变量 i ，每次循环时，setTimeout里面的 i 指的是全局变量 i ，所以循环里的十个 setTimeout 是在循环结束后才执行，所以此时的 i 都是 10.</li><li>变量 j 是用 let 声明的，当前的 j 只在本轮循环中有效，每次循环的 j 其实都是一个新的变量。（若每次循环的变量 j 都是重新声明的，如何知道前一个循环的值？这是因为 JavaScript 引擎内部会记住前一个循环的值）</li></ul><h4 id="不存在变量提升"><a href="#不存在变量提升" class="headerlink" title="不存在变量提升"></a>不存在变量提升</h4><ul><li><p>let 不存在变量提升，var 会变量提升</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">cosole.log(a); <span class="comment">// ReferenceError: a is not defined</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="string">&quot;apple&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="string">&quot;banana&quot;</span>;</span><br></pre></td></tr></table></figure></li><li><p>变量 b 用 var 声明存在变量提升，所以当脚本开始运行时，b 就已经存在了，但是还没有赋值，所以是 undefined。</p></li><li><p>变量 a 用 let 声明不存在变量提升，在声明变量 a 之前，a 不存在，所以会报错。</p></li></ul><h3 id="const命令"><a href="#const命令" class="headerlink" title="const命令"></a>const命令</h3><ul><li>const 声明一个只读变量，声明之后不允许改变。意味着，一旦声明必须初始化，否则会报错。</li></ul><h4 id="基本用法-1"><a href="#基本用法-1" class="headerlink" title="基本用法"></a>基本用法</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> PI = <span class="string">&quot;3.14&quot;</span>;</span><br><span class="line">PI  <span class="comment">// 3.14</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> MY_AGE;  <span class="comment">//SyntaxError: Missing initializer in const declaration</span></span><br></pre></td></tr></table></figure><h4 id="暂时性死区"><a href="#暂时性死区" class="headerlink" title="暂时性死区"></a>暂时性死区</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var PI = &quot;a&quot;;</span><br><span class="line">if(true) &#123;</span><br><span class="line">console.log(PI);  // ReferenceError: PI is not defined</span><br><span class="line">    const PI = &quot;3.1415926&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>ES6 明确规定，代码块内如果存在 let 或 const，代码块会对这些命令声明的变量从块的开始就形成一个封闭作用域。所以，代码块内，在声明变量 PI 之前使用它会报错。</li></ul><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><ul><li>其实 const 其实保证的不是变量的值不变，而是保证变量指向的内存地址所保存的数据不允许改动。</li><li>对于简单类型（数值 number、字符串 string 、布尔值 boolean）,值就保存在变量指向的那个内存地址，因此 const 声明的简单类型变量等同于常量。</li><li>而复杂类型（对象 object，数组 array，函数 function），变量指向的内存地址其实是保存了一个指向实际数据的指针，所以 const 只能保证指针是固定的，至于指针指向的数据结构变不变就无法控制了</li></ul><h2 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><ul><li>解构赋值是对赋值运算符的扩展。</li><li>他是一种针对数组或者对象进行模式匹配，然后对其中的变量进行赋值。</li><li>代码简洁易读，语义清晰，方便了复杂对象中数据字段获取。</li></ul><h3 id="结构模型"><a href="#结构模型" class="headerlink" title="结构模型"></a>结构模型</h3><ul><li>解构的源：解构赋值表达式的右边部分。</li><li>结构的目标：表达式左边的部分。</li></ul><h3 id="数组模型的结构（Array）"><a href="#数组模型的结构（Array）" class="headerlink" title="数组模型的结构（Array）"></a>数组模型的结构（Array）</h3><h4 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [a,b,c] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="comment">// a = 1, b = 2, c = 3</span></span><br></pre></td></tr></table></figure><h4 id="可嵌套"><a href="#可嵌套" class="headerlink" title="可嵌套"></a>可嵌套</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, [[b],c] ] = [<span class="number">1</span>, [[<span class="number">2</span>],<span class="number">3</span>] ];</span><br><span class="line"><span class="comment">// a = 1, b = 2, c = 3</span></span><br></pre></td></tr></table></figure><h4 id="可忽略"><a href="#可忽略" class="headerlink" title="可忽略"></a>可忽略</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, ,b] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="comment">// a = 1, b = 3</span></span><br></pre></td></tr></table></figure><h4 id="不完全解构"><a href="#不完全解构" class="headerlink" title="不完全解构"></a>不完全解构</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [a = <span class="number">1</span>, b] = [];</span><br><span class="line"><span class="comment">// a = 1, b = undefined</span></span><br></pre></td></tr></table></figure><h4 id="剩余运算符-…"><a href="#剩余运算符-…" class="headerlink" title="剩余运算符 …"></a>剩余运算符 …</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, ...b] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="comment">// a = 1, b = [2,3]</span></span><br></pre></td></tr></table></figure><h4 id="字符串等"><a href="#字符串等" class="headerlink" title="字符串等"></a>字符串等</h4><ul><li>在数组的解构中，解构的目标若为可遍历对象，皆可进行解构赋值。可遍历对象即实现 iterator 接口的数据。</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [a,b,c,d,e] = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line"><span class="comment">// a = &#x27;h&#x27;, b = &#x27;e&#x27;, c = &#x27;l&#x27;, d = &#x27;l&#x27;, e = &#x27;o&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="解构默认值"><a href="#解构默认值" class="headerlink" title="解构默认值"></a>解构默认值</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [a = <span class="number">2</span>] = [<span class="literal">undefined</span>];</span><br><span class="line"><span class="comment">// a = 2</span></span><br></pre></td></tr></table></figure><ul><li>当解构模式有匹配结果，且匹配结果是 undefined 时，会触发默认值作为返回结果</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [a = <span class="number">3</span>, b = a] = [];     <span class="comment">// a = 3, b = 3</span></span><br><span class="line"><span class="keyword">let</span> [a = <span class="number">3</span>, b = a] = [<span class="number">1</span>];    <span class="comment">// a = 1, b = 1</span></span><br><span class="line"><span class="keyword">let</span> [a = <span class="number">3</span>, b = a] = [<span class="number">1</span>, <span class="number">2</span>]; <span class="comment">// a = 1, b = 2</span></span><br></pre></td></tr></table></figure><ul><li>a 与 b 匹配结果为 undefined ，触发默认值：a = 3; b = a =3</li><li>a 正常解构赋值，匹配结果：a = 1，b 匹配结果 undefined ，触发默认值：b = a = 1</li><li>a 与 b 正常解构赋值，匹配结果：a = 1，b = 2</li></ul><h3 id="对象模型的解构"><a href="#对象模型的解构" class="headerlink" title="对象模型的解构"></a>对象模型的解构</h3><h4 id="基本-1"><a href="#基本-1" class="headerlink" title="基本"></a>基本</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;foo, bar&#125; = &#123;<span class="attr">foo</span>: <span class="string">&#x27;aaa&#x27;</span>, <span class="attr">bar</span>: <span class="string">&#x27;bbb&#x27;</span>&#125;;</span><br><span class="line"><span class="comment">// foo = &#x27;aaa&#x27;, bar = &#x27;bbb&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123;<span class="attr">baz</span> : foo&#125; = &#123;<span class="attr">baz</span> : <span class="string">&#x27;ddd&#x27;</span>&#125;</span><br><span class="line"><span class="comment">// foo = &#x27;ddd&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="可嵌套可忽略"><a href="#可嵌套可忽略" class="headerlink" title="可嵌套可忽略"></a>可嵌套可忽略</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">p</span>: [<span class="string">&#x27;hello&#x27;</span>, &#123;<span class="attr">y</span>: <span class="string">&#x27;world&#x27;</span>&#125;] &#125;;</span><br><span class="line"><span class="keyword">let</span> &#123; <span class="attr">p</span>: [x, &#123;y&#125;] &#125; = obj;</span><br><span class="line"><span class="comment">// x = &#x27;hello&#x27;</span></span><br><span class="line"><span class="comment">// y = &#x27;world&#x27;</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">p</span>: [<span class="string">&#x27;hello&#x27;</span>, &#123;<span class="attr">y</span>: <span class="string">&#x27;world&#x27;</span>&#125;] &#125;;</span><br><span class="line"><span class="keyword">let</span> &#123; <span class="attr">p</span>: [x, &#123; &#125;] &#125; = obj;</span><br><span class="line"><span class="comment">// x = &#x27;hello&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="不完全解构-1"><a href="#不完全解构-1" class="headerlink" title="不完全解构"></a>不完全解构</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">p</span>: [&#123;<span class="attr">y</span>: <span class="string">&#x27;world&#x27;</span>&#125;] &#125;;</span><br><span class="line"><span class="keyword">let</span> &#123; <span class="attr">p</span>:[&#123;y&#125;,x] &#125; = obj;</span><br><span class="line"><span class="comment">// x = undefined</span></span><br><span class="line"><span class="comment">// y = &#x27;world&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="剩余运算符"><a href="#剩余运算符" class="headerlink" title="剩余运算符"></a>剩余运算符</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;a, b, ...rest&#125; = &#123; <span class="attr">a</span>: <span class="number">10</span>, <span class="attr">b</span>: <span class="number">20</span>, <span class="attr">c</span>: <span class="number">30</span>, <span class="attr">d</span>: <span class="number">40</span> &#125;;</span><br><span class="line"><span class="comment">// a = 10</span></span><br><span class="line"><span class="comment">// b = 20</span></span><br><span class="line"><span class="comment">// c = &#123;c: 30, d :40&#125;</span></span><br></pre></td></tr></table></figure><h4 id="解构默认值-1"><a href="#解构默认值-1" class="headerlink" title="解构默认值"></a>解构默认值</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;a = <span class="number">10</span>, b = <span class="number">5</span>&#125; = &#123;<span class="attr">a</span>: <span class="number">3</span>&#125;;</span><br><span class="line"><span class="comment">// a = 3; b = 5;</span></span><br><span class="line"><span class="keyword">let</span> &#123;<span class="attr">a</span>: aa = <span class="number">10</span>, <span class="attr">b</span>: bb = <span class="number">5</span>&#125; = &#123;<span class="attr">a</span>: <span class="number">3</span>&#125;;</span><br><span class="line"><span class="comment">// aa = 3; bb = 5;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">ECMAScript 6.0特性</summary>
    
    
    
    <category term="前端" scheme="https://huxiuyuan/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JavaScript" scheme="https://huxiuyuan/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>MySQL</title>
    <link href="https://huxiuyuan/2022/03/22/mysql/%E7%AE%80%E5%8D%95SQL%E8%AF%AD%E5%8F%A5/"/>
    <id>https://huxiuyuan/2022/03/22/mysql/%E7%AE%80%E5%8D%95SQL%E8%AF%AD%E5%8F%A5/</id>
    <published>2022-03-22T12:49:07.986Z</published>
    <updated>2022-03-27T11:20:49.245Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><ul><li><p>学习数据库主要学习的就是如何对数据进行增删改查</p></li><li><p>DBMS: DataBaseManagementSystem,数据库管理系统(数据库软件),<br>DBMS负责管理数据库文件,负责将数据保存到数据库中.</p></li><li><p>常见的DBMS有:</p><ul><li><p>MySQL:Oracle公司产品,MariaDB其实就是MySQL的一个分支,MySQL市占率排名第一</p></li><li><p>Oracle: Oracle公司产品, 闭源, 性能最强价格最贵. 市占率第二</p></li><li><p>SQLServer: 微软公司产品,闭源 , 市占率第三</p></li><li><p>DB2: IBM公司产品,闭源</p></li><li><p>SQLite: 轻量级数据库, 安装包只有几十k , 只具备最基本的增删改查功能</p></li></ul></li></ul><hr><h2 id="SQL语言"><a href="#SQL语言" class="headerlink" title="SQL语言"></a>SQL语言</h2><ul><li>Structured Query Language: 结构化查询语言</li><li>此语言是用于程序员和数据库软件进行交流的语言</li></ul><h2 id="连接数据库软件"><a href="#连接数据库软件" class="headerlink" title="连接数据库软件"></a>连接数据库软件</h2><ul><li><p>windows: 开始菜单-&gt;MariaDB/MySQL-&gt;MySQL Client 输入密码</p></li><li><p>linux/mac os: 桌面空白处右键-&gt;打开终端-&gt;输入:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p 回车   输入密码 再回车</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="如何使用数据库软件在数据库文件中保存数据"><a href="#如何使用数据库软件在数据库文件中保存数据" class="headerlink" title="如何使用数据库软件在数据库文件中保存数据?"></a>如何使用数据库软件在数据库文件中保存数据?</h2><ol><li><p>查询所有数据</p><ul><li>格式: show database 数据库名;</li></ul></li><li><p>创建数据库</p><ul><li><p>默认字符集: creat database 数据库名;</p></li><li><p>指定字符集: creat database 数据库名 charset=utf8/gbk;</p></li><li><p>举例</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create database db1;</span><br><span class="line">create database db2 charset=utf8;</span><br><span class="line">create database db3 charset=gbk;</span><br><span class="line">show databases;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>查询数据库信息</p><ul><li><p>格式: show data database 数据库名;</p></li><li><p>举例</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show database db1;</span><br><span class="line">show database db2;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>删除数据库</p><ul><li><p>格式 drop database 数据库名;</p></li><li><p>举例</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">drop database db1;</span><br><span class="line">drop database db2;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>使用数据库</p><ul><li><p>操作表相关的SQL语句或数据相关的SQL语句之前必须使用了某个数据库</p></li><li><p>格式: use 数据库名</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use db1;</span><br></pre></td></tr></table></figure></li></ul></li></ol><p>数据库相关SQL练习</p><ol><li><p>创建 mydb1和mydb2 数据库 字符集分别为utf8和gbk<br>create database mydb1 charset=utf8;<br>create database mydb2 charset=gbk;</p></li><li><p>查询所有数据库检查是否创建成功<br>show databases;</p></li><li><p>检查两个数据库的字符集是否正确</p><p>show creat database mydb1;</p><p>show creat database mydb2;</p></li><li><p>先使用mydb2 再使用 mydb1</p><p>use mydb2;</p><p>use mydb1;</p></li><li><p>删除两个数据库</p><p>drop database db1;</p><p>drop database db2;</p></li></ol><hr><h2 id="表相关的SQL语句"><a href="#表相关的SQL语句" class="headerlink" title="表相关的SQL语句"></a>表相关的SQL语句</h2><ul><li>必须使用了某个数据库之后再执行表相关的SQL;<br>use db1;</li></ul><ol><li><p>创建表</p><ul><li><p>格式: create table 表名(字段1名 类型,字段2名 类型)charset=utf8/gbk;</p></li><li><p>举例</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table person(name varchar(50),age int)charset=utf8;</span><br><span class="line">创建学生表student 字段:id int,名字,chinese int,mathint,englishint 字符集gbk</span><br><span class="line">create table student(id int,name varchar(50),chinese int,matn int,english int)charset=gbk;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>查询所有表</p><ul><li>格式: show tables;</li></ul></li><li><p>查看所有表信息</p><ul><li>格式: show create table 表名;</li></ul></li><li><p>查看表字段</p><ul><li>格式: desc 表名;</li></ul></li><li><p>删除表</p><ul><li>格式: drop table 表名;</li></ul></li><li><p>修改表名</p><ul><li>格式: rename table 原名 to 新名</li></ul></li><li><p>添加表字段</p><ul><li>最后面添加格式: alter table 表名 add 字段名 类型;</li><li>最前面添加格式: alter table 表名 add 字段名 类型 first;</li><li>在xxx字段后面添加格式: alter table 表名 add 字段名 类型 after xxx;</li></ul></li><li><p>删除表字段</p><ul><li>格式: alter table 表明 drop 字段名;</li></ul></li><li><p>修改表字段</p><ul><li>格式: alter table 表名 change 原名 新名 新类型;</li></ul></li></ol><hr><h2 id="数据相关SQL"><a href="#数据相关SQL" class="headerlink" title="数据相关SQL"></a>数据相关SQL</h2><ol><li><p>插入数据(增)</p><ul><li><p>全表插入格式: insert into 表名 values(值1,值2);</p></li><li><p>指定字段插入格式: insert into 表名(字段1名,字段2名) values(值1,值2);</p></li><li><p>批量插入: 在values的后面写多组值用逗号分割</p></li><li><p>举例:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">insert into person values(&quot;a&quot;,20);</span><br><span class="line">insert into perosn(name) values(&quot;a&quot;);</span><br><span class="line">insert into person values(&quot;a&quot;,20),(&quot;b&quot;,20);</span><br></pre></td></tr></table></figure></li><li><p>中文问题:insert into person values(“刘德华”,50);</p><p>如果执行上面SQL语句提示错误并在错误信息中显示16进制内容执行以下SQL语句</p><p>set names gbk;</p><p><img src="https://cdn.jsdelivr.net/gh/huxiuyuan/learn/image-20210929093913575.png" alt="image-20210929093913575"></p></li></ul></li><li><p>查询数据</p><ul><li><p>格式: select 字段信息 from 表名 where 条件;</p></li><li><p>举例</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from person; /*查询所有字段信息*/</span><br><span class="line">select name from perosn;</span><br><span class="line">select name,age from person;</span><br><span class="line">select * from perosn where name=&quot;a&quot;;</span><br><span class="line">select name from person where age&lt;20;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>修改数据</p><ul><li><p>格式: update 表名 set 字段名=值,字段名=值 where 条件;</p></li><li><p>举例</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">update perosn set name=&quot;b&quot; where name=&quot;a&quot;;</span><br><span class="line">update person ser age=20 where name=&quot;a&quot;;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>删除数据</p><ul><li><p>格式: delete from 表名 where 条件;</p></li><li><p>举例</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">delete from perosn where name=&quot;b&quot;;</span><br><span class="line">delete from perosn;</span><br></pre></td></tr></table></figure></li></ul></li></ol><hr><h2 id="导入批处理文件-sql"><a href="#导入批处理文件-sql" class="headerlink" title="导入批处理文件 *.sql"></a>导入批处理文件 *.sql</h2><ul><li>把*.sql文件放到某个磁盘的根目录,比如F盘</li><li>在终端中执行  source 路径;    即可把emp.sql中的数据库/表/数据 导入到自己的mysql里面</li><li>测试:<ul><li>show databases; // 会显示多了一个 empdb</li></ul></li></ul><hr><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><ol><li><p>整数: int(m)和bigint        bigint相当于Java中的long,m代表长度<br>m为10时,存18 查询时显示 0000000018,需要和zerofill关键字结合使用</p><ul><li><p>举例:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table t1(age int(10) zerofill);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>浮点数: double(m,d) m代表长度,d代表小数长度   35.342  m=5  d=3<br>超高精度浮点数 decimal(m,d),当涉及到超高精度浮点数运算时使用</p><ul><li><p>举例</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table t2(money double(5,3));</span><br><span class="line">insert into t2 values(55.234);  /*正常*/</span><br><span class="line">insert into t2 values(55.234556332);  /*55.235 四舍五入*/</span><br><span class="line">insert into t2 values(555.2335);  /*规则不符  出异常*/</span><br></pre></td></tr></table></figure></li></ul></li><li><p>字符串</p><ul><li>char(m): 固定长度, m=10 存abc 所占长度为10,执行效率略高于可变长度,当需求中长度时固定的值时使用,最大长度为255</li><li>varchar(m): 可变长度,m=10 存abc所占长度为3,更节省空间,最大长度65535,规范保存255以内的数据,超过255的建议使用text</li><li>text(m): 可变长度,最大长度65535</li></ul></li><li><p>时间</p><ul><li><p>data: 只能保存年月日</p></li><li><p>time: 只能保存时分秒</p></li><li><p>datatime: 保存年月日时分秒 , 默认值为null, 最大值9999-12-31</p></li><li><p>timestamp(时间戳距离1970年1月1日毫秒数): 保存年月日时分秒,默认值为当前系统时间, 最大值2038-1-19</p></li><li><p>举例</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table t_data(t1 data,t2 time,t3 datetime,t4 timestamp);</span><br><span class="line">insert into t_date values(&quot;2021-9-29&quot;,null,null,null);</span><br><span class="line">insert into t_date values(null,&quot;14:48:22&quot;,&quot;1985-11-22 10:20:30&quot;,null);</span><br></pre></td></tr></table></figure></li></ul></li></ol><hr><h2 id="主键约束-primary-key"><a href="#主键约束-primary-key" class="headerlink" title="主键约束 primary key"></a>主键约束 primary key</h2><ul><li><p>主键: 表示数据唯一性的字段称为主键</p></li><li><p>约束: 在创建的时候给表字段添加的限制条件</p></li><li><p>主键约束: 限制主键的值 唯一且非空</p></li><li><p>举例</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table t(id int primary key,name varchar(20));</span><br><span class="line">insert into t values(1,&quot;a&quot;);</span><br><span class="line">insert into t values(1,&quot;b&quot;);/*报错*/</span><br><span class="line">ERROR 1062 (23000): Duplicate entry &#x27;1&#x27; for key &#x27;PRIMARY&#x27; 主键值重复错误</span><br><span class="line">insert into t values(null,&quot;赵六&quot;); //报错</span><br><span class="line">ERROR 1048 (23000): Column &#x27;id&#x27; cannot be null</span><br></pre></td></tr></table></figure></li></ul><h2 id="主键约束-自增-auto-increment"><a href="#主键约束-自增-auto-increment" class="headerlink" title="主键约束+自增 auto_increment"></a>主键约束+自增 auto_increment</h2><ul><li>规则: 从历史最大值+1 只增不减</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table t3(id int primary key auto_increment,name varchar(20));</span><br></pre></td></tr></table></figure><hr><h2 id="比较运算符-gt-lt-gt-lt-和-lt-gt"><a href="#比较运算符-gt-lt-gt-lt-和-lt-gt" class="headerlink" title="比较运算符 &gt; &lt; &gt;= &lt;= !=和&lt;&gt;"></a>比较运算符 &gt; &lt; &gt;= &lt;= !=和&lt;&gt;</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.查询工资小于等于3000的员工信息</span><br><span class="line">select * from emp where sal&lt;=3000;</span><br><span class="line">2.查询1号部门的员工姓名和工作</span><br><span class="line">select name,job from emp where dept_id=1;</span><br><span class="line">3.查询不是程序员的员工姓名 工资和工作(两种写法)</span><br><span class="line">select name,sal,job from emp where job!=&quot;程序员&quot;;</span><br><span class="line">select name,sal,job from emp where job&lt;&gt;&quot;程序员&quot;;</span><br><span class="line">4.查询有奖金的员工姓名和奖金</span><br><span class="line">select name,comm from emp where comm&gt;0;</span><br></pre></td></tr></table></figure><h2 id="与and-或or-非not"><a href="#与and-或or-非not" class="headerlink" title="与and 或or 非not"></a>与and 或or 非not</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.查询1号部门工资大于2000的员工信息</span><br><span class="line">select * from emp where dept_id=1 and sal&gt;2000;</span><br><span class="line">2.查询是程序员或者工资等于5000的员工信息</span><br><span class="line">select * from emp where job=&quot;程序员&quot; or sal=5000;</span><br><span class="line">3.查询出CEO和项目经理的名字</span><br><span class="line">select name from emp where job=&quot;CEO&quot; or job=&quot;项目经理&quot;;</span><br><span class="line">4.查询奖金是500的销售信息</span><br><span class="line">select * from emp where comm=500 and job=&quot;销售&quot;</span><br></pre></td></tr></table></figure><h2 id="between-x-and-y"><a href="#between-x-and-y" class="headerlink" title="between x and y"></a>between x and y</h2><ul><li>查询两者之间包含x和y</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.查询工资在2000到3000之间的员工信息</span><br><span class="line">select * from emp where sal&gt;=2000 and sal&lt;=3000;</span><br><span class="line">select * from emp where sal between 2000 and 3000;</span><br><span class="line">2.查询工资在2000到3000之外的员工信息</span><br><span class="line">select * from emp where sal not between 2000 and 3000;</span><br></pre></td></tr></table></figure><h2 id="in"><a href="#in" class="headerlink" title="in"></a>in</h2><ul><li><p>当查询某个自动的值为多个值的时候使用</p></li><li><p>举例</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from emp where sal=1500 or sal=3000 or sal=5000;</span><br><span class="line">select * from emp where sal in(1500,3000,5000);</span><br><span class="line">select * from emp where sal not in(1500,3000,5000);</span><br></pre></td></tr></table></figure></li></ul><h2 id="模糊查询like"><a href="#模糊查询like" class="headerlink" title="模糊查询like"></a>模糊查询like</h2><ul><li>_: 代表1个未知字符</li><li>%: 代表0或多个未知字符</li><li>举例<ul><li>以x开头 x%</li><li>以x结尾 %x</li><li>包含x   %x%</li><li>第二个是x  _x%</li><li>以x开头倒数第三个是y   x%y_</li></ul></li></ul><h2 id="排序-order-by"><a href="#排序-order-by" class="headerlink" title="排序 order by"></a>排序 order by</h2><ul><li>格式: order by 排序字段名 asc(默认升序)/desc(降序)</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.查询每个员工的姓名和工资 按照工资升序和降序排序</span><br><span class="line">select name,sal from emp order by sal;</span><br><span class="line">select name,sal from emp order by sal desc;</span><br><span class="line">2. (多字段排序)查询工资高于1000的员工姓名,工资和部门编号,按照部门编号升序排序,如果部门编号一致则按照工资降序排序</span><br><span class="line">select name,sal,dept_id from emp where sal&gt;1000 order by depe_id,sal desc;</span><br></pre></td></tr></table></figure><h2 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h2><ul><li><p>格式: limit 跳过的条数(跳过的页数*每页的条数),请求的条数(每页的条数)</p></li><li><p>举例</p><ul><li>limit 0,5 请求第一页的五条数据</li><li>limit 5,5 请求第二页的五条数据</li><li>limit 70,10 请求第八页的13条数据</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.查询员工姓名和工资,按照工资升序排序, 查询第一页的5条数据</span><br><span class="line">select name,sal from emp order by sal limit 0,5;</span><br><span class="line">2.查询1号部门工资最高的员工姓名和工资</span><br><span class="line">select name from emp where dept_id=1 order by sal desc limit 0,1;</span><br></pre></td></tr></table></figure></li></ul><h2 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h2><p>select name as “名字” from emp;<br>select name “名字” from emp;<br>select name 名字 from emp;</p><h2 id="数值计算"><a href="#数值计算" class="headerlink" title="数值计算 + - * / %"></a>数值计算 + - * / %</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.查询每个员工的姓名,工资和年终奖(工资*5)</span><br><span class="line">select name,sal,sal*5 年终奖 from emp;</span><br><span class="line">2.让1号部门的员工涨薪5块钱</span><br><span class="line">update emp set sal=sal+5 where dept_id=1;</span><br></pre></td></tr></table></figure><hr><h2 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h2><ul><li>聚合函数可以对查询的多条数据进行统计查询</li><li>统计方式: 平均值,最大值,最小值,求和,计数</li></ul><ol><li><p>平均值avg(字段名)</p><ul><li><p>查询1号部门的平均工资</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select avg(sal) from emp where dept_id=1;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>最大值max(字段名)</p><ul><li><p>查询1号部门的最高工资</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select max(sal) from emp where dept_id=1;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>最小值min(字段名)</p><ul><li><p>查询1号部门的最低工资</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select min(sal) from emp where dept_id=1;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>求和sum(字段名)</p><ul><li><p>查询1号部门的工资总和</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select sun(sal) from emp where dept_id=1;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>计数count(*)</p><ul><li><p>查询1号部门的人数</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select count(*) from emp where dept_id=1;</span><br></pre></td></tr></table></figure></li></ul></li></ol><hr><h2 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h2><ul><li>可以将某个字段相同值的多条数据合并为一组然后以组为单位,进行统计查询</li><li>需求中出现每个xxx或每种xxx基本都是分组查询的关键字</li></ul><ol><li><p>查询每个部门的平均工资</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select dept_id,avg(sal) from emp group by dept_id;</span><br></pre></td></tr></table></figure></li><li><p>查询每个部门的工资总和</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select dept_id,sum(sal) from emp group by dept_id;</span><br></pre></td></tr></table></figure></li><li><p>查询每种工作的最高工资</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select job,max(sal) from emp group by job;</span><br></pre></td></tr></table></figure></li><li><p>查询每种工作的人数</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select job,count(*) from emp group by job;</span><br></pre></td></tr></table></figure></li><li><p>查询1号和2号部门的人数</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select dept_id,count(*) from emp where dept_id in(1,2) group by dept_id;</span><br></pre></td></tr></table></figure></li></ol><h2 id="Having"><a href="#Having" class="headerlink" title="Having"></a>Having</h2><ul><li>where 后面只能写普通字段条件,不能写聚合函数条件</li><li>having 后面写聚合函数条件,并且需要和group by结合使用,写在group by的后面</li></ul><ol><li><p>查询每个部门的平均工资,要求平均工资大于2000</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select dept_id,avg(sal) from emp group by dept_id having avg(sal)&gt;2000;</span><br></pre></td></tr></table></figure></li><li><p>查询每种工作的人数,只查询人数大于1的工作名称和人数.</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select job,count(*) from emp group by job having count(*)&gt;1;</span><br><span class="line">/*别名写法*/</span><br><span class="line">select job,count(*) c from emp group by job having c&gt;1;</span><br></pre></td></tr></table></figure></li><li><p>查询每个部门的工资总和，只查询有领导的员工，并且要求工资总和高于5400</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select dept_id,sum(sal) s from emp</span><br><span class="line">where manager is not null group by dept_id having s&gt;5400;</span><br></pre></td></tr></table></figure></li><li><p>查询每个部门的平均工资,只查询工资在1000到3000之间的,并且过滤掉平均工资低于2000的部门信息</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select dept_id,svg(sal) a from emp where sal between 1000 and 3000</span><br><span class="line">group by dept_id having&gt;=2000;</span><br></pre></td></tr></table></figure></li><li><p>查询每种工作的人数要求人数大于1个,并且只查询1号部门和2号部门的员工, 按照人数降序排序</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select job,count(*) c from emp where dept_id in(1,2) group by job</span><br><span class="line">having c&gt;1 order by desc;</span><br></pre></td></tr></table></figure></li></ol><hr><h2 id="各种关键字的顺序"><a href="#各种关键字的顺序" class="headerlink" title="各种关键字的顺序"></a>各种关键字的顺序</h2><ul><li><p>select 字段信息 from 表名 where 普通字段条件 group by 分组字段名</p><p>having 聚合函数条件 order by 排序字段名 limit 跳过条数,请求条数;</p></li></ul><hr><h2 id="子查询-嵌套查询"><a href="#子查询-嵌套查询" class="headerlink" title="子查询(嵌套查询)"></a>子查询(嵌套查询)</h2><ol><li><p>查询工资高于1号部门 平均工资的员工信息</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select avg(sal) from emp where dept_id=1;</span><br><span class="line">select * from emp where sal&gt;(select avg(sal) from emp where</span><br><span class="line">dept_id=1);</span><br></pre></td></tr></table></figure></li><li><p>查询工资最高的员工信息</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from emp where sal=(select max(sal) from emp);</span><br></pre></td></tr></table></figure></li><li><p>查询工资高于2号部门最低工资的员工信息</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from emp where sal&gt;(select min(sal) from emp where</span><br><span class="line">dept_id=2);</span><br></pre></td></tr></table></figure></li><li><p>查询和孙悟空相同工作的其它员工信息</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select job from emp where name=&quot;孙悟空&quot;;</span><br><span class="line">select * from emp where job=(select job from emp where </span><br><span class="line">name=&quot;孙悟空&quot;) and name!=&quot;孙悟空&quot;;</span><br></pre></td></tr></table></figure></li><li><p>查询拿最低工资员工的同事们的信息(同事指相同部门)</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*先得到最低工资*/</span><br><span class="line">select min(sal) from emp;</span><br><span class="line">/*通过最低工资得到部门id*/</span><br><span class="line">select dept_id from emp where sal=(select min(sal) from emp)</span><br><span class="line">/*通过部门id得到所有员工, 还要排除掉最低工资*/</span><br><span class="line">select * from emp where dept_id=(select dept_id from emp where</span><br><span class="line">sal=(select min(sal) from emp)) and sal!=(select min(sal) from emp);</span><br></pre></td></tr></table></figure></li></ol><hr><h2 id="关联关系"><a href="#关联关系" class="headerlink" title="关联关系"></a>关联关系</h2><ul><li>创建表时,表和表之间存在的业务关系</li><li>包含以下几种关系:<ul><li>一对一关系:有AB两张表,A表中的一条数据对应B表中的一条数据,同时B表中的一条数据也对应A表中的一条数据</li><li>一对多关系:有AB两张表,A表中的一条数据对应B表中的多条数据,同时B表中的一条数据也对应A表中的多条数据</li><li>多对多关系:有AB两张表,A表中的一条数据对应B表中的多条数据,同时B表中的一条数据也对应A表中的多条数据</li></ul></li><li>如何让表之间建立联系?<ul><li>一对一关系: 在AB两张表任何一个表中添加建立联系的字段</li><li>一对多关系:在一对多中,多的表里面添加建立关系的字段</li><li>多对多关系:需要创建一个单独的关系表,里面两个字段指向另外两个表的主键</li></ul></li></ul><h2 id="关联查询"><a href="#关联查询" class="headerlink" title="关联查询"></a>关联查询</h2><ul><li>查询存在关联方式的表的查询方式称为关联查询</li><li>三种查询方式: 等值连接,内连接和外连接</li></ul><h2 id="关联查询之等值连接"><a href="#关联查询之等值连接" class="headerlink" title="关联查询之等值连接"></a>关联查询之等值连接</h2><ul><li><p>格式: select * from A,B where 关联关系 and 其他条件;</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*1.查询工资高于2000的每个员工的姓名和对应的部门名*/</span><br><span class="line">select e.name,d.name</span><br><span class="line">from emp e,dept d where e.dept_id=d.id and sal&gt;2000;</span><br><span class="line">/*2.查询程序员的名字,工资,部门名和部门地点*/</span><br><span class="line">select e.name,sal,d.name,loc from emp e.dept d where e.dept_id=d.id and job=&quot;程序员&quot;;</span><br></pre></td></tr></table></figure></li></ul><h2 id="关联查询之内链接"><a href="#关联查询之内链接" class="headerlink" title="关联查询之内链接"></a>关联查询之内链接</h2><ul><li><p>等值连接和内连接作用一样,查询到的都是两个表的交际数据,推荐使用内连接</p></li><li><p>格式: select * from A jon B on 关联关系 where 其他条件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*1.查询工资高于2000的每个员工的姓名和对应的部门名*/</span><br><span class="line">select e.name,d.name</span><br><span class="line">from emp e join dept d on e.dept_id=d.id where sal&gt;2000;</span><br><span class="line">/*2.查询程序员的名字,工资,部门名和部门地点*/</span><br><span class="line">select e.name,sal,d.name,loc</span><br><span class="line">from emp e join dept d on e.dept_id=d.id where job=&quot;程序员&quot;;</span><br></pre></td></tr></table></figure></li></ul><h2 id="关联查询之外连接"><a href="#关联查询之外连接" class="headerlink" title="关联查询之外连接"></a>关联查询之外连接</h2><ul><li><p>外连接查询到的是一张表的全部和另一张表的交集</p></li><li><p>格式: select * from A lefr/right join B on 关联关系 where 其他条件;</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*1.查询所有员工姓名和对应的部门名*/</span><br><span class="line">select e.name,d.name from emp e left join dept d on e.dept_id=d.id;</span><br><span class="line">/*2.查询所有部门的名字和对应的员工姓名,工资和工作*/</span><br><span class="line">select d.name,e.name,sal,job</span><br><span class="line">from emp e right jon dept d on e.dept_id=d.id;</span><br></pre></td></tr></table></figure></li></ul><h2 id="关联查询总结"><a href="#关联查询总结" class="headerlink" title="关联查询总结:"></a>关联查询总结:</h2><ul><li>如果查询的数据是多张表的数据则考虑使用关联查询</li><li>如果查询的是两个表的交集数据,则使用等值连接或外连接(推荐)</li><li>如果查询的是一张表和另外一张表的交集则使用外连接</li></ul>]]></content>
    
    
    <summary type="html">MySQL 基本命令</summary>
    
    
    
    <category term="MySQL" scheme="https://huxiuyuan/categories/MySQL/"/>
    
    
  </entry>
  
  <entry>
    <title>Docker安装</title>
    <link href="https://huxiuyuan/2022/03/21/Docker/Centos7%E5%AE%89%E8%A3%85Docker/"/>
    <id>https://huxiuyuan/2022/03/21/Docker/Centos7%E5%AE%89%E8%A3%85Docker/</id>
    <published>2022-03-21T13:39:19.696Z</published>
    <updated>2022-03-27T11:20:59.315Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="0-安装Docker"><a href="#0-安装Docker" class="headerlink" title="0.安装Docker"></a>0.安装Docker</h1><p>Docker 分为 CE 和 EE 两大版本。CE 即社区版（免费，支持周期 7 个月），EE 即企业版，强调安全，付费使用，支持周期 24 个月。</p><p>Docker CE 分为 <code>stable</code> <code>test</code> 和 <code>nightly</code> 三个更新频道。</p><p>官方网站上有各种环境下的 <a href="https://docs.docker.com/install/">安装指南</a>，这里主要介绍 Docker CE 在 CentOS上的安装。</p><h1 id="1-CentOS安装Docker"><a href="#1-CentOS安装Docker" class="headerlink" title="1.CentOS安装Docker"></a>1.CentOS安装Docker</h1><p>Docker CE 支持 64 位版本 CentOS 7，并且要求内核版本不低于 3.10， CentOS 7 满足最低内核的要求，所以我们在CentOS 7安装Docker。</p><h2 id="1-1-卸载（可选）"><a href="#1-1-卸载（可选）" class="headerlink" title="1.1.卸载（可选）"></a>1.1.卸载（可选）</h2><p>如果之前安装过旧版本的Docker，可以使用下面命令卸载：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-selinux \</span><br><span class="line">                  docker-engine-selinux \</span><br><span class="line">                  docker-engine \</span><br><span class="line">                  docker-ce</span><br></pre></td></tr></table></figure><h2 id="1-2-安装docker"><a href="#1-2-安装docker" class="headerlink" title="1.2.安装docker"></a>1.2.安装docker</h2><p>首先需要大家虚拟机联网，安装yum工具</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum install -y yum-utils \</span><br><span class="line">           device-mapper-persistent-data \</span><br><span class="line">           lvm2 --skip-broken</span><br></pre></td></tr></table></figure><p>然后更新本地镜像源：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 设置docker镜像源</span></span><br><span class="line">yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line">    </span><br><span class="line">sed -i &#x27;s/download.docker.com/mirrors.aliyun.com\/docker-ce/g&#x27; /etc/yum.repos.d/docker-ce.repo</span><br><span class="line"></span><br><span class="line">yum makecache fast</span><br></pre></td></tr></table></figure><p>然后输入命令：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y docker-ce</span><br></pre></td></tr></table></figure><p>docker-ce为社区免费版本。稍等片刻，docker即可安装成功。</p><h2 id="1-3-启动docker"><a href="#1-3-启动docker" class="headerlink" title="1.3.启动docker"></a>1.3.启动docker</h2><p>Docker应用需要用到各种端口，逐一去修改防火墙设置。非常麻烦，因此建议大家直接关闭防火墙！</p><p>启动docker前，一定要关闭防火墙后！！</p><p>启动docker前，一定要关闭防火墙后！！</p><p>启动docker前，一定要关闭防火墙后！！</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 关闭</span></span><br><span class="line">systemctl stop firewalld</span><br><span class="line"><span class="comment"># 禁止开机启动防火墙</span></span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld</span><br></pre></td></tr></table></figure><p>通过命令启动docker：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">systemctl start docker  <span class="comment"># 启动docker服务</span></span><br><span class="line"></span><br><span class="line">systemctl stop docker  <span class="comment"># 停止docker服务</span></span><br><span class="line"></span><br><span class="line">systemctl restart docker  <span class="comment"># 重启docker服务</span></span><br></pre></td></tr></table></figure><p>然后输入命令，可以查看docker版本：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker -v</span><br></pre></td></tr></table></figure><p>如图：</p><p><img src="https://cdn.jsdelivr.net/gh/huxiuyuan/java-learn/202202241511021.png" alt="image-20220224151127911"></p><h2 id="1-4-配置镜像加速"><a href="#1-4-配置镜像加速" class="headerlink" title="1.4.配置镜像加速"></a>1.4.配置镜像加速</h2><p>docker官方镜像仓库网速较差，我们需要设置国内镜像服务：</p><p>参考阿里云的镜像加速文档：<a href="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors">https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors</a></p><h1 id="2-CentOS7安装DockerCompose"><a href="#2-CentOS7安装DockerCompose" class="headerlink" title="2.CentOS7安装DockerCompose"></a>2.CentOS7安装DockerCompose</h1><h2 id="2-1-下载"><a href="#2-1-下载" class="headerlink" title="2.1.下载"></a>2.1.下载</h2><p>Linux下需要通过命令下载：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">curl -L https://github.com/docker/compose/releases/download/1.23.1/docker-compose-`uname -s`-`uname -m` &gt; /usr/<span class="built_in">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure><p>如果下载速度较慢，或者下载失败，可以使用课前资料提供的docker-compose文件：</p><p><img src="assets/image-20210417133020614.png" alt="image-20210417133020614"></p><p>上传到<code>/usr/local/bin/</code>目录也可以。</p><h2 id="2-2-修改文件权限"><a href="#2-2-修改文件权限" class="headerlink" title="2.2.修改文件权限"></a>2.2.修改文件权限</h2><p>修改文件权限：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改权限</span></span><br><span class="line">chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure><h2 id="2-3-Base自动补全命令："><a href="#2-3-Base自动补全命令：" class="headerlink" title="2.3.Base自动补全命令："></a>2.3.Base自动补全命令：</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 补全命令</span></span><br><span class="line">curl -L https://raw.githubusercontent.com/docker/compose/1.29.1/contrib/completion/bash/docker-compose &gt; /etc/bash_completion.d/docker-compose</span><br></pre></td></tr></table></figure><p>如果这里出现错误，需要修改自己的hosts文件：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;199.232.68.133 raw.githubusercontent.com&quot;</span> &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure><h1 id="3-Docker镜像仓库"><a href="#3-Docker镜像仓库" class="headerlink" title="3.Docker镜像仓库"></a>3.Docker镜像仓库</h1><p>搭建镜像仓库可以基于Docker官方提供的DockerRegistry来实现。</p><p>官网地址：<a href="https://hub.docker.com/_/registry">https://hub.docker.com/_/registry</a></p><h2 id="3-1-简化版镜像仓库"><a href="#3-1-简化版镜像仓库" class="headerlink" title="3.1.简化版镜像仓库"></a>3.1.简化版镜像仓库</h2><p>Docker官方的Docker Registry是一个基础版本的Docker镜像仓库，具备仓库管理的完整功能，但是没有图形化界面。</p><p>搭建方式比较简单，命令如下：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">    --restart=always \</span><br><span class="line">    --name registry\</span><br><span class="line">    -p 5000:5000 \</span><br><span class="line">    -v registry-data:/var/lib/registry \</span><br><span class="line">    registry</span><br></pre></td></tr></table></figure><p>命令中挂载了一个数据卷registry-data到容器内的/var/lib/registry 目录，这是私有镜像库存放数据的目录。</p><p>访问<a href="http://yourip:5000/v2/_catalog">http://YourIp:5000/v2/_catalog</a> 可以查看当前私有镜像服务中包含的镜像</p><h2 id="3-2-带有图形化界面版本"><a href="#3-2-带有图形化界面版本" class="headerlink" title="3.2.带有图形化界面版本"></a>3.2.带有图形化界面版本</h2><p>使用DockerCompose部署带有图象界面的DockerRegistry，命令如下：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.0&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">registry:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">registry</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./registry-data:/var/lib/registry</span></span><br><span class="line">  <span class="attr">ui:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">joxit/docker-registry-ui:static</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8080</span><span class="string">:80</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">REGISTRY_TITLE=传智教育私有仓库</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">REGISTRY_URL=http://registry:5000</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">registry</span></span><br></pre></td></tr></table></figure><h2 id="3-3-配置Docker信任地址"><a href="#3-3-配置Docker信任地址" class="headerlink" title="3.3.配置Docker信任地址"></a>3.3.配置Docker信任地址</h2><p>我们的私服采用的是http协议，默认不被Docker信任，所以需要做一个配置：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打开要修改的文件</span></span><br><span class="line">vi /etc/docker/daemon.json</span><br><span class="line"><span class="comment"># 添加内容：</span></span><br><span class="line"><span class="string">&quot;insecure-registries&quot;</span>:[<span class="string">&quot;http://192.168.150.101:8080&quot;</span>]</span><br><span class="line"><span class="comment"># 重加载</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line"><span class="comment"># 重启docker</span></span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Linux安装Docker</summary>
    
    
    
    <category term="Docker" scheme="https://huxiuyuan/categories/Docker/"/>
    
    
  </entry>
  
  <entry>
    <title>Docker</title>
    <link href="https://huxiuyuan/2022/03/20/Docker/docker/"/>
    <id>https://huxiuyuan/2022/03/20/Docker/docker/</id>
    <published>2022-03-19T19:41:06.953Z</published>
    <updated>2022-03-27T11:20:55.759Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><blockquote><p>Docker是一个快速交付应用、运行应用的技术</p></blockquote><p>项目部署的问题</p><p>大型项目组件较多，运行环境也较为复杂，部署时会遇到一些问题：</p><ul><li>依赖关系复杂，容易出现兼容性问题</li><li>开发，测试，生产环境有差异</li></ul><h2 id="Docker如何解决依赖的兼容性问题？"><a href="#Docker如何解决依赖的兼容性问题？" class="headerlink" title="Docker如何解决依赖的兼容性问题？"></a>Docker如何解决依赖的兼容性问题？</h2><ul><li>Ubuntn和CentOS都是基于Liunx内核，只是系统应用不同，提供的函数库有差异</li></ul><p><img src="https://cdn.jsdelivr.net/gh/huxiuyuan/java-learn/202112242102916.png" alt="image-20211224210226739"></p><blockquote><ul><li>Docker将用户程序与所需要调用的系统(比如Ubuntn)函数库一起打包</li><li>Docker运行到不同操作系统时，直接基于打包的库函数，借助于操作系统的Linux内核来运行</li></ul></blockquote><p>Docker如何解决大型项目依赖关系复杂，不同组件依赖的兼容性问题？</p><ul><li>Docker允许开发中将应用、依赖、函数库、配置一起<strong>打包</strong>，形成可移植镜像</li><li>Docker应用运行在容器中，使用沙箱机制，相互<strong>隔离</strong></li></ul><p>Docker如何解决开发、测试、生产环境有差异的问题？</p><ul><li>Docker镜像中包含完整运行环境，包括系统函数库，仅依赖系统的Linux内核，因此可以在任意Linux操作系统上运行</li></ul><h2 id="Docker与虚拟机"><a href="#Docker与虚拟机" class="headerlink" title="Docker与虚拟机"></a>Docker与虚拟机</h2><p><img src="https://cdn.jsdelivr.net/gh/huxiuyuan/java-learn/202112242113120.png" alt="image-20211224211342994"></p><p>Docker和虚拟机的差异：</p><blockquote><ul><li>docker是一个系统进程，虚拟机是在操作系统中的操作系统。</li><li>docker体积小、启动速度快、性能好；虚拟机体积大、启动速度慢、性能一般。</li></ul></blockquote><h2 id="镜像和容器"><a href="#镜像和容器" class="headerlink" title="镜像和容器"></a>镜像和容器</h2><blockquote><p>镜像（image）：Docker将应用程序及其所需的依赖、函数库、环境、配置等文件打包在一起，成为镜像。</p><p>容器（Container）：镜像中的应用程序运行后形成的进程就是容器，只    是Docker会给容器做隔离，对外不可见</p></blockquote><h2 id="Docker和DockerHub"><a href="#Docker和DockerHub" class="headerlink" title="Docker和DockerHub"></a>Docker和DockerHub</h2><ul><li>DockerHub：DockerHub是一个Docker镜像的托管平台。这样的平台称为Docker Registry。</li><li>国内也有类似于DockerHub的公开服务，比如网易云镜像服务、阿里云镜像服务</li></ul><h2 id="Docker架构"><a href="#Docker架构" class="headerlink" title="Docker架构"></a>Docker架构</h2><ul><li><p>Docker是一个CS架构的程序，由两部分组成：</p><ol><li><p>服务端（server）：Docker守护进程，负责处理Docker指令，管理镜像、容器等</p></li><li><p>客户端（client）：通过命令或RestAPI向Docker服务端发送指令。可以在本地或远程向服务端发送指令。</p><p><img src="https://cdn.jsdelivr.net/gh/huxiuyuan/java-learn/202112242125466.png" alt="image-20211224212532354"></p></li></ol></li></ul><h2 id="Docker数据卷"><a href="#Docker数据卷" class="headerlink" title="Docker数据卷"></a>Docker数据卷</h2><ul><li><blockquote><p>数据卷（volume）：是一个虚拟目录，指向宿主机文件系统中的某个目录</p></blockquote></li></ul><p>docker容器内部配置对外不可见，容器删除后配置随之删除，造成了</p><ol><li>不便于修改，要进入容器内部进行修改</li><li>数据不可复用：在容器内的修改对外是不可见的。所有修改对新创建的容器不可复用</li><li>升级维护困难：数据在容器内，如果要升级容器必然删除旧容器，所有数据都跟着删除了</li></ol><p><img src="https://cdn.jsdelivr.net/gh/huxiuyuan/java-learn/202112271509737.png" alt="image-20211227150906606"></p><ul><li>数据卷的作用<ol><li>将容器与数据分离，解耦合，方便操作容器内数据，保证数据安全</li></ol></li></ul><h2 id="挂载数据卷"><a href="#挂载数据卷" class="headerlink" title="挂载数据卷"></a>挂载数据卷</h2><p>我们在创建容器时，可以通过 -v 参数来挂在一个数据卷到某个容器目录</p><p><img src="https://cdn.jsdelivr.net/gh/huxiuyuan/java-learn/202112271517486.png" alt="image-20211227151759434"></p>]]></content>
    
    
    <summary type="html">Docker介绍</summary>
    
    
    
    <category term="Docker" scheme="https://huxiuyuan/categories/Docker/"/>
    
    
    <category term="Docker" scheme="https://huxiuyuan/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://huxiuyuan/2022/03/19/hexo/hello-world/"/>
    <id>https://huxiuyuan/2022/03/19/hexo/hello-world/</id>
    <published>2022-03-18T17:34:43.135Z</published>
    <updated>2022-03-27T11:20:45.682Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="创建一篇新文章"><a href="#创建一篇新文章" class="headerlink" title="创建一篇新文章"></a>创建一篇新文章</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="启动Hexo本地服务"><a href="#启动Hexo本地服务" class="headerlink" title="启动Hexo本地服务"></a>启动Hexo本地服务</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br><span class="line">访问localhost:4000访问本地服务</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="将博客推送到github上"><a href="#将博客推送到github上" class="headerlink" title="将博客推送到github上"></a>将博客推送到github上</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <summary type="html">Hexo 基本命令</summary>
    
    
    
    <category term="Hexo" scheme="https://huxiuyuan/categories/Hexo/"/>
    
    
  </entry>
  
</feed>
